---
- name: Deploy local app from Containerfile
  hosts: localhost
  connection: local
  vars:
    domain_name: "{{ ansible_fqdn }}"
    app_directory: "{{ app_dir | mandatory }}"
    app_name: "{{ app_directory | basename }}"
    app_port: "{{ container_port | default(80) }}"
    app_internal_domain: "{{ domain_name }}.app.internal"
  tasks:
    - name: Check if directory exists
      ansible.builtin.stat:
        path: "{{ app_directory }}"
      register: dir_check

    - name: Fail if directory doesn't exist
      ansible.builtin.fail:
        msg: "Directory {{ app_directory }} does not exist"
      when: not dir_check.stat.exists or not dir_check.stat.isdir

    - name: Check if Containerfile exists
      ansible.builtin.stat:
        path: "{{ app_directory }}/Containerfile"
      register: containerfile_check

    - name: Fail if Containerfile doesn't exist
      ansible.builtin.fail:
        msg: "Containerfile not found in {{ app_directory }}"
      when: not containerfile_check.stat.exists

    - name: Read Containerfile to extract port
      ansible.builtin.slurp:
        src: "{{ app_directory }}/Containerfile"
      register: containerfile_content

    - name: Extract port from Containerfile
      ansible.builtin.set_fact:
        detected_port: "{{ containerfile_content.content | b64decode | regex_search('(?i)^\\s*EXPOSE\\s+(\\d+)', '\\1', multiline=True) | first | default(app_port) }}"

    - name: Show app configuration
      ansible.builtin.debug:
        msg:
          - "App name: {{ app_name }}"
          - "App directory: {{ app_directory }}"
          - "Container port: {{ detected_port }}"
          - "Domain: {{ app_name }}.{{ domain_name }}"

    - name: Build container image
      containers.podman.podman_image:
        name: "{{ app_name }}-local"
        path: "{{ app_directory }}"
        build:
          file: "{{ app_directory }}/Containerfile"
        force: true
        state: present

    - name: Stop existing container if running
      containers.podman.podman_container:
        name: "{{ app_name }}.{{ app_internal_domain }}"
        state: stopped
      ignore_errors: true

    - name: Remove existing container
      containers.podman.podman_container:
        name: "{{ app_name }}.{{ app_internal_domain }}"
        state: absent
      ignore_errors: true

    - name: Ensure Traefik conf.d directory exists
      ansible.builtin.file:
        path: /etc/traefik/conf.d
        state: directory
        mode: '0755'

    - name: Deploy Traefik configuration for app
      ansible.builtin.template:
        src: traefik-simple-app.yaml.j2
        dest: "/etc/traefik/conf.d/{{ app_name }}.yaml"
        mode: '0644'

    - name: Deploy application container
      containers.podman.podman_container:
        name: "{{ app_name }}.{{ app_internal_domain }}"
        image: "{{ app_name }}-local"
        state: started
        recreate: true
        network: proxy
        hostname: "{{ app_name }}.{{ app_internal_domain }}"